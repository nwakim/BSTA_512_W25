---
title: "Lesson 2: Data and File Management"
subtitle: "Adapted from parts of Mine Çetinkaya-Rundel's tidyverse course"
author: "Nicky Wakim"
title-slide-attributes:
    data-background-color: "#213c96"
date: "01/8/2025"
format: 
  revealjs:
    theme: "../simple_NW.scss"
    chalkboard: true
    slide-number: true
    show-slide-number: all
    width: 1955
    height: 1100
    footer: "Lesson 2: Data Management"
    highlight-style: ayu
---

```{r setup, include = FALSE}
# R options
options(htmltools.dir.version = FALSE)

# figure height, width, dpi
knitr::opts_chunk$set(echo = TRUE, 
                      fig.width = 5, 
                      fig.height = 3,
                      dpi = 300)

# fontawesome
htmltools::tagList(rmarkdown::html_dependency_font_awesome())

# magick
dev.off <- function(){
  invisible(grDevices::dev.off())
}

# set seed
set.seed(1234)

# packages
library(countdown)
library(tidyverse)
library(broom)
library(scales)
library(openintro)
library(jsonlite)
library(here)
```

# What we will cover

1. Introduction to `tidyverse`
2. `ggplot2` revisited
2. Functions for data management
3. Functions for data summarization
4. Folder organization
5. `here` package and importing data

 

- Not covered: basic Quarto set up. Please see R recordings in OneDrive and my [EPI 525 site](https://nwakim.github.io/F24_EPI_525/schedule.html) for videos and slides.

```{css, echo=FALSE}
.reveal code {
  max-height: 100% !important;
}
```

## 

![Artwork by \@allison_horst](../img_slides/debugging.png){fig-alt="A cartoon of a fuzzy round monster face showing 10 different emotions experienced during the process of debugging code. The progression goes from (1) “I got this” - looking determined and optimistic; (2) “Huh. Really thought that was it.” - looking a bit baffled; (3) “...” - looking up at the ceiling in thought; (4) “Fine. Restarting.” - looking a bit annoyed; (5) “OH WTF.” Looking very frazzled and frustrated; (6) “Zombie meltdown.” - looking like a full meltdown; (7) (blank) - sleeping; (8) “A NEW HOPE!” - a happy looking monster with a lightbulb above; (9) “insert awesome theme song” - looking determined and typing away; (10) “I love coding” - arms raised in victory with a big smile, with confetti falling."}

# Introduction to the `tidyverse`

## 

![](../img_slides/spiderverse.jpeg){fig-align="center"}

## What is the tidyverse?

The **tidyverse** is a collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.

::: columns
::: {.column width="45%"}
-   **ggplot2** - data visualisation
-   **dplyr** - data manipulation
-   **tidyr** - tidy data
-   **readr** - read rectangular data
-   **purrr** - functional programming
-   **tibble** - modern data frames
-   **stringr** - string manipulation
-   **forcats** - factors
-   and many more ...
:::

::: {.column width="55%"}
![](../img_slides/tidyverse.png){fig-align="center" width="669"}
:::
:::

## Tidy data[^1]

[^1]: Source: R for Data Science. Grolemund and Wickham.

![](../img_slides/tidy-data-frame.png){fig-align="center" width="1500"}


1.  Each variable must have its own column.

2.  Each observation must have its own row.

3.  Each value must have its own cell.

## Pipe operator (`magrittr`)

-   The pipe operator (`%>%`) allows us to step through sequential functions in the same way we follow if-then statements or steps from instructions

 

::: heq
I want to find my keys, then start my car, then drive to work, then park my car.
:::

 

::: columns
::: {.column width="50%"}
**Nested**

```{r eval = FALSE}
park(drive(start_car(find("keys")), 
           to = "work"))
```
:::

::: {.column width="50%"}
**Piped**

```{r eval = FALSE}
find("keys") %>%
  start_car() %>%
  drive(to = "work") %>%
  park()
```
:::
:::

## Recoding a binary variable with pipe operator

 

::: heq
Let's say I want a variable `transmission` to show the category names that are assigned to numeric values in the code. I want `0` to be coded as `automatic` and `1` to be coded as `manual`.
:::

 

::: columns
::: {.column width="50%"}
Base R:

```{r}
mtcars$transmission <-
  ifelse(
    mtcars$am == 0,
    "automatic",
    "manual"
  )
```
:::

::: {.column width="50%"}
Tidyverse:

```{r}
mtcars <- mtcars %>%
  mutate(
    transmission = case_when(
      am == 0 ~ "automatic",
      am == 1 ~ "manual"
    )
  )
```

 

::: hl
`mutate()` creates new columns that are functions of existing variables
:::
:::
:::

## Recoding a multi-level variable

 

::: heq
Let's say I want a variable `gear` to show the category names that are assigned to numeric values in the code. I want `3` to be coded as gear `three`, `4` to be coded as gear `four`, `5` to be coded as gear `five`.
:::

 

::: columns
::: {.column width="50%"}
Base R:

```{r}
mtcars$gear_char <-
  ifelse(
    mtcars$gear == 3,
    "three",
    ifelse(
      mtcars$gear == 4,
      "four",
      "five"
    )
  )
```
:::

::: {.column width="50%"}
Tidyverse:

```{r}
mtcars <- mtcars %>%
  mutate(
    gear_char = case_when(
      gear == 3 ~ "three",
      gear == 4 ~ "four",
      gear == 5 ~ "five"
    )
  )
```
:::
:::

# `ggplot2` revisited

## `ggplot2` in tidyverse

::: columns
::: {.column width="50%"}
![](../img_slides/ggplot2-part-of-tidyverse.png){fig-align="center" width="669"}

:::

::: {.column width="50%"}
-   We talked about this in our review notes

    -   I want to revisit it: always helps to have more examples!
    -   This example is closer to the multivariable work we'll do in this class!

 

-   **ggplot2** is tidyverse's data visualization package

 

-   The `gg` in "ggplot2" stands for Grammar of Graphics

 

-   It is inspired by the book **Grammar of Graphics** by Leland Wilkinson
:::
:::

## Tidyverse: Visualizing multiple variables

 

```{r out.width = "100%", fig.asp = 0.3, fig.width = 8}
ggplot(
  mtcars,
  aes(x = disp, y = mpg, color = transmission)) +
  geom_point()
```

## Tidyverse: Visualizing even more variables

```{r out.width = "100%", fig.asp = 0.3, fig.width = 8}
ggplot(
  mtcars,
  aes(x = disp, y = mpg, color = transmission)) +
  geom_point() +
  facet_wrap(~ cyl)
```

## Base R: Visualizing even more variables

```{r out.width = "100%", fig.asp = 0.3, fig.width = 8}
mtcars$trans_color <- ifelse(mtcars$transmission == "automatic", "green", "blue")
mtcars_cyl4 = mtcars[mtcars$cyl == 4, ]
mtcars_cyl6 = mtcars[mtcars$cyl == 6, ]
mtcars_cyl8 = mtcars[mtcars$cyl == 8, ]
par(mfrow = c(1, 3), mar = c(2.5, 2.5, 2, 0), mgp = c(1.5, 0.5, 0))
plot(mpg ~ disp, data = mtcars_cyl4, col = trans_color, main = "Cyl 4")
plot(mpg ~ disp, data = mtcars_cyl6, col = trans_color, main = "Cyl 6")
plot(mpg ~ disp, data = mtcars_cyl8, col = trans_color, main = "Cyl 8")
legend("topright", legend = c("automatic", "manual"), pch = 1, col = c("green", "blue"))
```

# Functions for data management

## Important functions for data management

 

**Data manipulation**

-   `pivot_longer()` and `pivot_wider()` (not covered today)

-   `rename()`

-   `mutate()`

-   `filter()`

-   `select()`

**Summarizing data**

-   `tbl_summary()`
-   `group_by()`
-   `summarize()`
-   `across()`

## Let's look back at the `dds.discr` dataset that I briefly used last class

   

-   We will load the data (This is a special case! `dds.discr` is a built-in R dataset)

```{r}
data("dds.discr")
```

-   Now, let's take a glimpse at the dataset:

```{r}
glimpse(dds.discr)
```

## `rename()`: one of the first things I usually do

-   I notice that two variables have values that don't necessarily match the variable name

    -   Female and male are not genders

    -   "White not Hispanic" combines race and ethnicity into one category

::: heq
I want to rename gender to SAB (sex assigned at birth) and rename ethnicity to R_E (race and ethnicity)
:::

 

```{r}
dds.discr1 = dds.discr %>% 
  rename(SAB = gender, 
         R_E = ethnicity)

glimpse(dds.discr1)
```

## `mutate()`: constructing new variables from what you have

-   We've seen a couple examples for `mutate()` so far (mostly because its used so often!)

-   We haven't seen an example where we make a new variable from two variables

::: heq
I want to make a variable that is the ratio of expenditures over age
:::

 

```{r}
dds.discr2 = dds.discr1 %>%
  mutate(exp_to_age = expenditures/age)

glimpse(dds.discr2)
```

## `mutate()`: other examples

```{r}
dds.discr3 = dds.discr1 %>%
  mutate(expend_20perc = expenditures * 0.2, 
         expend_sq = expenditures^2, 
         expend_over_5000 = case_when(
           expenditures > 5000 ~ "Yes", 
           expenditures <= 5000 ~ "No"
         ), 
         expend_log = log(expenditures)
  )
glimpse(dds.discr3)
```

## `filter()`: keep rows that match a condition

-   What if I want to subset the data frame? (keep certain rows of observations)

::: heq
I want to look at the data for people who between 50 and 60 years old
:::

 

```{r}
dds.discr3 = dds.discr2 %>%
  filter(age >= 50 & age <= 60)

glimpse(dds.discr3)
```

## `select()`: keep or drop columns using their names and types

-   What if I want to remove or keep certain variables?

::: heq
I want to only have age and expenditure in my data frame
:::

 

```{r}
dds.discr4 = dds.discr2 %>%
  select(age, expenditures)

glimpse(dds.discr4)
```

# Summarizing Data

## `tbl_summary()` : table summary (1/2)

-   What if I want one of those fancy summary tables that are at the top of most research articles? (lovingly called "Table 1")

::: columns
::: {.column width="50%"}
```{r}
#| eval: false

library(gtsummary)
tbl_summary(dds.discr2)
```
:::

::: {.column width="50%"}
```{r}
#| echo: false

library(gtsummary)
tbl_summary(dds.discr2)
```
:::
:::

## `tbl_summary()` : table summary (2/2)

-   Let's make this more presentable

 

::: columns
::: {.column width="70%"}
```{r}
#| eval: false

dds.discr2 %>%
  select(-id, -age.cohort, -exp_to_age) %>%
  tbl_summary(label = c(age ~ "Age", 
                        R_E ~ "Race/Ethnicity", 
                        SAB ~ "Sex Assigned at Birth", 
                        expenditures ~ "Expenditures") ,
              statistic = list(all_continuous() ~ "{mean} ({sd})"))
```
:::

::: {.column width="30%"}
```{r}
#| echo: false

dds.discr2 %>%
  select(-id, -age.cohort, -exp_to_age) %>%
  tbl_summary(label = c(age ~ "Age", 
                        R_E ~ "Race/Ethnicity", 
                        SAB ~ "Sex Assigned at Birth", 
                        expenditures ~ "Expenditures") ,
              statistic = list(all_continuous() ~ "{mean} ({sd})"))
```
:::
:::

## `group_by()`: group by one or more variables

-   What if I want to quickly look at group differences?
-   It will not change how the data look, but changes the actions of following functions

::: heq
I want to group my data by sex assigned at birth.
:::

 

```{r}
dds.discr5 = dds.discr2 %>%
  group_by(SAB)
glimpse(dds.discr5)
```

-   Let's see how the groups change something like the `summarize()` function in the next slide

## `summarize()`: summarize your data or grouped data into one row

-   What if I want to calculate specific descriptive statistics for my variables?
-   This function is often best used with `group_by()`
-   If only presenting the summaries, functions like `tbl_summary()` is better
-   `summarize()` creates a new data frame, which means you can plot and manipulate the summarized data

 

::: columns
::: column
Over whole sample:

```{r}
dds.discr2 %>% 
  summarize(
    ave = mean(expenditures),
    SD = sd(expenditures),
    med = median(expenditures))
```
:::

::: column
Grouped by sex assigned at birth:

```{r}
dds.discr2 %>% 
  group_by(SAB) %>% 
  summarize(
    ave = mean(expenditures),
    SD = sd(expenditures),
    med = median(expenditures))
```
:::
:::

## `across()`: apply a function across multiple columns

-   Like `group_by()`, this function is often paired with another transformation function

::: heq
I want all my integer values to have two significant figures.
:::

 

```{r}
dds.discr6 = dds.discr2 %>%
  mutate(across(where(is.integer), signif, digits = 2))

glimpse(dds.discr6)
```

# Folder organization

## Folder organization

-   Make a folder for our class!
    -   I suggest naming it something like `BSTA_512_W25` to indicate the class and the term
-   Make these folders in your computer (or in OneDrive if you prefer)

    -   Only make them in OneDrive **if** you have a desktop connection

::: columns
::: column
-   For a project, I have the following folders

    -   Background
    -   Code
    -   Data_Raw
    -   Data_Processed
    -   Dissemination
    -   Reports
    -   Meetings
:::

::: column
-   For our class, I suggest making one folder for the course with the following folders in it:

    -   Data
    -   Homework
    -   Project (with above subfolders)
    -   Lessons
    -   And other folders if you want
:::
:::

## Aside: folder and file naming

There are a few good practices for naming files and folders for easy tracking:

1. Keep the name short and relevant
2. Use leading numbers to help organize sequential items
    - I can show you my lessons folders as an example 
3. Use dates in the format "YYYY-MM-DD" so that files are in chronological order
4. You can label different versions if you would like to 
5. Use "_" to separate sections of the name
    - I also use this to separate words, but some people say you should use "-" to separate words
    
## Creating project in RStudio

-   Way to designate a working directory: basically your home base when working in R

    -   We have to tell R exactly where we are in our folders and where to find other things

    -   A project makes it easier to tell R where we are

-   Basic steps to create a project

    -   Go into RStudio

    -   Create new project for this class (under `File` or top right corner)
        
        - I would chose "Existing Directory" since we have already set up our folders
        - Make the new project in the `BSTA_512_W25` folder

-   Once we have projects, we can open one and R will automatically know that its location is the start of our working directory

- Only make one project for now!! 

## The nice thing about R projects

- 5 minute video explaining some of the nice features of R projects

<https://rfortherestofus.com/2022/10/rstudio-projects>


## Reproducibility

- Research data and code can reach the same results regardless of who is running the code

  - This can also refer to future or past you!

 

- We want to set up our work so the entire folder can be moved around and work in its new location

 

- Projects work well in combination with the `here` package

# `here` package and importing data

## `here` package

![Illustration by [Allison Horst](https://github.com/allisonhorst)](../img_slides/here_pkg.png)

## `here` package

::::: columns
::: column
-   [Good source for the `here` package](http://jenrichmond.rbind.io/post/how-to-use-the-here-package/)

    -   Just substitute `.Rmd` with `.qmd`

-   Basically, a `.qmd` file and `.R` file work differently

    -   We haven't worked much with `.R` files

-   For `.qmd` files, the automatic directory is the folder it is in

    -   But we want it to be the main project folder

-   `here` can help with that

 

-   **Very important for reproducibility!!**
:::

::: column
![](../img_slides/paths.png){fig-align="center"}
:::
:::::

## Using `here` package

-   Within your console, type `here()` and enter

    -   Try this with `getwd()` as well

```{r}
library(here)
here()
getwd()
```

 

-   `here` can be used whenever we need to access a file path in **R code**
    -   Importing data
    -   Saving output
    -   Accessing files

# Importing data

## Using `here()` to load data

-   The `here()` function will start at the working directory (where your `.Rproj` file is) and let you write out a file path for anything

-   To load the dataset in our `.qmd` file, we will use:

```{r}
#| eval: false
library(readxl)
data = read_excel(here("./data/BodyTemperatures.xlsx"))
data = read_excel(here("data", "BodyTemperatures.xlsx"))
```


## Common functions to load data

| Function       | Data file type  | Package needed |
|----------------|-----------------|----------------|
| `read_excel()` | `.xls`, `.xlsx` | `readxl`       |
| `read.csv()`   | `.csv`          | Built in       |
| `load()`       | `.Rdata`        | Built in       |
| `read_sas()`   | `.sas7bdat`     | `haven`        |


# Resources

## `dplyr` resources

-   [More `dpylr` functions to reference!](https://dplyr.tidyverse.org/reference/index.html)

Additional details and examples are available in the vignettes:

-   [column-wise operations vignette](https://dplyr.tidyverse.org/articles/colwise.html)

-   [row-wise operations vignette](https://dplyr.tidyverse.org/articles/rowwise.html)

 

and the dplyr 1.0.0 release blog posts:

-   [working across columns](https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-colwise/)
-   [working within rows](https://www.tidyverse.org/blog/2020/04/dplyr-1-0-0-rowwise/)

## R programming class at OHSU!

You can check out [Dr. Jessica Minnier's R class page](https://sph-r-programming-2022.netlify.app/) if you want more notes, videos, etc.

## The larger tidy ecosystem

Just to name a few...

-   [janitor](https://garthtarr.github.io/meatR/janitor.html)

-   [kableExtra](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html)

-   [patchwork](https://patchwork.data-imaginist.com/)

-   [gghighlight](https://cran.r-project.org/web/packages/gghighlight/vignettes/gghighlight.html)

-   [tidybayes](https://mjskay.github.io/tidybayes/)

## Credit to Mine Çetinkaya-Rundel

-   These notes were built from Mine's notes

    -   Most pages and code were left as she made them

    -   I changed a few things to match our class

-   Please see [her Github repository](https://github.com/mine-cetinkaya-rundel/teach-ds-wsc-2021/tree/main) for the original notes
