x = "Female Litaracy Rate (%)",
y = "Life Expectancy (yrs)") +
theme(axis.title = element_text(size = 10),
axis.text = element_text(size = 10),
title = element_text(size = 10))
plot_LE_FS <- ggplot(gapm_sub, aes(x = FoodSupplykcPPD,
y = LifeExpectancyYrs)) +
geom_point() +
geom_smooth() +
geom_smooth(method = "lm", color = "#F14124") +
labs(title = "Life expectancy vs. \n food supply",
x = "Food supply (kcal PPD)",
y = "Life Expectancy (yrs)") +
theme(axis.title = element_text(size = 10),
axis.text = element_text(size = 10),
title = element_text(size = 10))
plot_FLR_FS <- ggplot(gapm_sub, aes(x = FoodSupplykcPPD,
y = FemaleLiteracyRate)) +
geom_point() +
geom_smooth() +
geom_smooth(method = "lm", color = "#F14124") +
labs(title = "Female literacy rate vs. \n food supply",
y = "Female Litaracy Rate (%)",
x = "Food supply (kcal PPD)") +
theme(axis.title = element_text(size = 10),
axis.text = element_text(size = 10),
title = element_text(size = 10))
grid.arrange(plot_LE_FLR, plot_LE_FS, plot_FLR_FS,
nrow = 1)
# Chunk 5
#| echo: false
#| fig-align: center
# plotly package is require for plot_ly function, which is loaded at beginning of Rmd
# z = response variable
# x & y are predictor variables
dim3_scatter <- plot_ly(gapm_sub,
x = ~FemaleLiteracyRate,
y = ~FoodSupplykcPPD,
z = ~LifeExpectancyYrs) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Female literacy rate'),
yaxis = list(title = 'Food supply (kc PPD)'),
zaxis = list(title = 'Life expectancy')))
dim3_scatter
# Chunk 6
# Fit regression model:
mr1 <- lm(LifeExpectancyYrs ~ FemaleLiteracyRate + FoodSupplykcPPD,
data = gapm_sub)
tidy(mr1, conf.int=T) %>% gt() %>% tab_options(table.font.size = 35) %>% fmt_number(decimals = 3)
# Chunk 7
summary(mr1)
mr1_tidy = tidy(mr1, conf.int=T)
mr1_tidy$estimate[1]
round(mr1_tidy$estimate[1], 3)
?anova
anova.lm
car::Anova(mr1) %>% tidy() %>% gt() %>%
tab_options(table.font.size = 40) %>% fmt_number(decimals = 3)
SSY_plot = ggplot(SS_df, aes(SSY_dev)) + geom_histogram() + xlim(-30, 30) + ylim(0, 35) + xlab(expression((Y_i - \overline{Y})))
library(here)
# Chunk 1
#| message: false
library(tidyverse)
library(gtsummary)
library(here)
if(!require(lubridate)) { install.packages("lubridate"); library(lubridate) }
load(file = here("../TA_files/Project/data/IAT_data.rda"))
iat_prep = iat_2021_raw %>%
select(IAT_score = D_biep.Thin_Good_all,
att7, iam_001, identfat_001,
myweight_002, myheight_002,
identthin_001, controlother_001,
controlyou_001, mostpref_001,
important_001,
birthmonth, birthyear, month, year,
raceomb_002, raceombmulti, ethnicityomb,
edu, edu_14,
genderIdentity,
birthSex)
fatal_dep = read_sas(here("../data/completedata.sas7bdat"))
fatal_dep = read_sas(here("data/completedata.sas7bdat"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rstatix)
library(broom)
library(gt)
library(janitor)
library(readxl)
library(haven)
library(here)
library(gtsummary) ## Added this package!!
# Chunk 1: "setup"
#| label: "setup"
#| include: false
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
library(knitr)
library(broom)
library(rstatix)
library(gt)
library(readxl)
#----------
# new packages
# install.packages("describedata")
library(describedata) # gladder()
library(gridExtra)   # grid.arrange()
library(ggfortify)  # autoplot(model)
# New Day 6
library(gtsummary)
# New Day 7
library(plotly) # for plot_ly() command
library(GGally) # for ggpairs() command
library(ggiraphExtra)   # for ggPredict() command
# Load the data - update code if the csv file is not in the same location on your computer
# If you need to download the file, please go to ur shared folder under Data > Slides
gapm <- read_excel("data/Gapminder_vars_2011.xlsx",
na = "NA")  # important!!!!
gapm_sub <- gapm %>% # called it gapm2_sub3 to be consistent with Day 7 notes
drop_na(LifeExpectancyYrs, FemaleLiteracyRate, four_regions, FoodSupplykcPPD) %>%
mutate(four_regions = factor(four_regions,
levels = c("africa", "americas",
"asia", "europe"),
labels = c("Africa", "Americas",
"Asia", "Europe"))) %>%
rename(income_levels = `World bank, 4 income groups 2017`) %>%
mutate(income_levels1 = factor(income_levels,
levels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income")),
income_levels2 = relevel(factor(income_levels,
levels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income"),
labels = c("Lower income", "Lower income",
"Higher income", "Higher income")),
ref = "Lower income"))
gapm2 = gapm %>% select(-Longitude, -Latitude, -eight_regions, -six_regions, -geo, -`World bank, 4 income groups 2017`, -country, -population, -`World bank region`, -ElectricityUsePP)
# Chunk 2
#| fig-height: 8
#| fig-width: 11
#| echo: false
#| fig-align: center
ggplot(gapm_sub, aes(x = FemaleLiteracyRate,
y = LifeExpectancyYrs)) +
geom_point(size = 4) +
geom_smooth(method = "lm", se = FALSE, size = 3, colour="#F14124") +
labs(x = "Female literacy rate (%)",
y = "Life expectancy (years)",
title = "Life expectancy vs. female literacy rate") +
theme(axis.title = element_text(size = 22),
axis.text = element_text(size = 22),
title = element_text(size = 22))
# Chunk 1: "setup"
#| label: "setup"
#| include: false
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
library(knitr)
library(broom)
library(rstatix)
library(gt)
library(readxl)
#----------
# new packages
# install.packages("describedata")
library(describedata) # gladder()
library(gridExtra)   # grid.arrange()
library(ggfortify)  # autoplot(model)
# New Day 6
library(gtsummary)
# New Day 7
library(plotly) # for plot_ly() command
library(GGally) # for ggpairs() command
library(ggiraphExtra)   # for ggPredict() command
# Load the data - update code if the csv file is not in the same location on your computer
# If you need to download the file, please go to ur shared folder under Data > Slides
gapm <- read_excel("data/Gapminder_vars_2011.xlsx",
na = "NA")  # important!!!!
gapm_sub <- gapm %>% # called it gapm2_sub3 to be consistent with Day 7 notes
drop_na(LifeExpectancyYrs, FemaleLiteracyRate, four_regions, FoodSupplykcPPD) %>%
mutate(four_regions = factor(four_regions,
levels = c("africa", "americas",
"asia", "europe"),
labels = c("Africa", "Americas",
"Asia", "Europe"))) %>%
rename(income_levels = `World bank, 4 income groups 2017`) %>%
mutate(income_levels1 = factor(income_levels,
levels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income")),
income_levels2 = relevel(factor(income_levels,
levels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income"),
labels = c("Lower income", "Lower income",
"Higher income", "Higher income")),
ref = "Lower income"))
gapm2 = gapm %>% select(-Longitude, -Latitude, -eight_regions, -six_regions, -geo, -`World bank, 4 income groups 2017`, -country, -population, -`World bank region`, -ElectricityUsePP)
# Chunk 2
#| fig-height: 8
#| fig-width: 11
#| echo: false
#| fig-align: center
ggplot(gapm_sub, aes(x = FemaleLiteracyRate,
y = LifeExpectancyYrs)) +
geom_point(size = 4) +
geom_smooth(method = "lm", se = FALSE, size = 3, colour="#F14124") +
labs(x = "Female literacy rate (%)",
y = "Life expectancy (years)",
title = "Life expectancy vs. female literacy rate") +
theme(axis.title = element_text(size = 22),
axis.text = element_text(size = 22),
title = element_text(size = 22))
gapm_sub %>% ggpairs()
gapm2 %>% ggpairs()
# Chunk 1: "setup"
#| label: "setup"
#| include: false
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
library(knitr)
library(broom)
library(rstatix)
library(gt)
library(readxl)
#----------
# new packages
# install.packages("describedata")
library(describedata) # gladder()
library(gridExtra)   # grid.arrange()
library(ggfortify)  # autoplot(model)
# New Day 6
library(gtsummary)
# New Day 7
library(plotly) # for plot_ly() command
library(GGally) # for ggpairs() command
library(ggiraphExtra)   # for ggPredict() command
# Load the data - update code if the csv file is not in the same location on your computer
# If you need to download the file, please go to ur shared folder under Data > Slides
gapm <- read_excel("data/Gapminder_vars_2011.xlsx",
na = "NA")  # important!!!!
gapm_sub <- gapm %>% # called it gapm2_sub3 to be consistent with Day 7 notes
drop_na(LifeExpectancyYrs, FemaleLiteracyRate, four_regions, FoodSupplykcPPD) %>%
mutate(four_regions = factor(four_regions,
levels = c("africa", "americas",
"asia", "europe"),
labels = c("Africa", "Americas",
"Asia", "Europe"))) %>%
rename(income_levels = `World bank, 4 income groups 2017`) %>%
mutate(income_levels1 = factor(income_levels,
levels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income")),
income_levels2 = relevel(factor(income_levels,
levels = c("Low income",
"Lower middle income",
"Upper middle income",
"High income"),
labels = c("Lower income", "Lower income",
"Higher income", "Higher income")),
ref = "Lower income"))
gapm2 = gapm %>% select(-Longitude, -Latitude, -eight_regions, -six_regions, -geo, -`World bank, 4 income groups 2017`, -country, -population, -`World bank region`, -ElectricityUsePP)
# Chunk 2
#| fig-height: 8
#| fig-width: 11
#| echo: false
#| fig-align: center
ggplot(gapm_sub, aes(x = FemaleLiteracyRate,
y = LifeExpectancyYrs)) +
geom_point(size = 4) +
geom_smooth(method = "lm", se = FALSE, size = 3, colour="#F14124") +
labs(x = "Female literacy rate (%)",
y = "Life expectancy (years)",
title = "Life expectancy vs. female literacy rate") +
theme(axis.title = element_text(size = 22),
axis.text = element_text(size = 22),
title = element_text(size = 22))
# Chunk 3
#| fig-align: center
#| echo: true
gapm2 %>% ggpairs()
# Chunk 4
#| fig-width: 6
#| fig-height: 4
#| fig-align: center
mr1 <- lm(LifeExpectancyYrs ~ FemaleLiteracyRate + FoodSupplykcPPD,
data = gapm_sub)
(mr1_2d = ggPredict(mr1, interactive = T))
# Chunk 5
#| echo: false
ggplot(gapm_sub, aes(x = FemaleLiteracyRate, y = LifeExpectancyYrs,
color = income_levels2)) +
geom_point(size = 3) +
geom_smooth(method = lm, se = FALSE, size=2) +
labs(x = "Female Literacy Rate (%)",
y = "Life expectancy (years)",
title = "Life expectancy vs. Female Literacy Rate",
color = "Income levels") +
theme(axis.title = element_text(size = 20),
axis.text = element_text(size = 20),
title = element_text(size = 20),
legend.text=element_text(size= 18)) +
scale_color_manual(values=c("#FF8021", "#34AC8B"))
# Chunk 6
#| echo: true
m_int_inc2 = gapm_sub %>%
lm(formula = LifeExpectancyYrs ~ FemaleLiteracyRate + income_levels2 +
FemaleLiteracyRate*income_levels2)
# Chunk 7
#| echo: true
m_int_inc2 = gapm_sub %>%
lm(formula = LifeExpectancyYrs ~ FemaleLiteracyRate*income_levels2)
# Chunk 8
#| echo: true
tidy(m_int_inc2, conf.int=T) %>% gt() %>% tab_options(table.font.size = 35) %>% fmt_number(decimals = 3)
# Chunk 9
#| echo: false
ggplot(gapm_sub, aes(x = FemaleLiteracyRate, y = LifeExpectancyYrs,
color = income_levels2)) +
geom_point(size = 3) +
geom_smooth(method = lm, se = FALSE, size=2) + ylim(30, 84) +
labs(x = "Female Literacy Rate (%)",
y = "Life expectancy (years)",
title = "Life expectancy vs. Female Literacy Rate",
color = "Income levels") +
theme(axis.title = element_text(size = 22),
axis.text = element_text(size = 22),
title = element_text(size = 22),
legend.text=element_text(size= 20), legend.position="bottom") +
scale_color_manual(values=c("#FF8021", "#34AC8B"))
# Chunk 10
#| echo: true
gapm_sub = gapm_sub %>%
mutate(FLR_c = FemaleLiteracyRate - median(FemaleLiteracyRate))
# Chunk 11
#| echo: true
(mean_FLR = mean(gapm_sub$FemaleLiteracyRate))
coef_centered = tidy(m_int_inc2, conf.int=T)
#| echo: true
m_int_inc2 = gapm_sub %>%
lm(formula = LifeExpectancyYrs ~ FLR_c*income_levels2)
coef_centered = tidy(m_int_inc2, conf.int=T)
coef_centered$estimate[1]
round(coef_centered$estimate[1], 2)
#| echo: true
m_int_wr = gapm_sub %>% lm(formula = LifeExpectancyYrs ~ FLR_c + four_regions +
FLR_c*four_regions)
#| echo: true
m_int_wr = gapm_sub %>% lm(formula = FLR_c*four_regions)
#| echo: true
m_int_wr = gapm_sub %>% lm(formula = FLR_c * four_regions)
View(gapm_sub)
#| echo: true
m_int_wr = gapm_sub %>% lm(formula = LifeExpectancyYrs ~ FLR_c + four_regions +
FLR_c*four_regions)
#| echo: true
m_int_wr = gapm_sub %>% lm(formula = FLR_c * four_regions)
round(m_int_wr_fit$estimates[1], 3)
#| echo: false
m_int_wr_fit = tidy(m_int_wr, conf.int=T)
round(m_int_wr_fit$estimates[1], 3)
round(m_int_wr_fit$estimate[1], 3)
iat_2021_raw = read.csv(file = here("../Project/data/iat_data.rda"))
load(file = here("../Project/data/iat_data.rda"))
load(file = here("../Project/data/iat_data.rda"))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rstatix)
library(broom)
library(gt)
library(janitor)
library(readxl)
library(haven)
library(here)
library(gtsummary) ## Added this package!!
load(file = here("../Project/data/iat_data.rda"))
View(iat_2021)
iat_2021 = iat_2021 %>%
mutate(iam_001_f = case_match(iam_001,
7 ~ "Very overweight",
6 ~ "Moderately overweight",
5 ~ "Slightly overweight",
4 ~ "Neither underweight nor underweight",
3 ~ "Slightly underweight",
2 ~ "Moderately underweight",
1 ~ "Very underweight",
.default = NA) %>%
factor(levels = c("Very underweight",
"Moderately underweight",
"Slightly underweight",
"Neither underweight nor underweight",
"Slightly overweight",
"Moderately overweight",
"Very overweight")))
iat_2021 = iat_2021 %>%
select(IAT_score = D_biep.Thin_Good_all,
att7, iam_001, identfat_001,
myweight_002, myheight_002,
identthin_001, controlother_001,
controlyou_001, mostpref_001,
important_001,
birthmonth, birthyear, month, year,
raceomb_002, raceombmulti, ethnicityomb,
edu, edu_14,
genderIdentity,
birthSex)
iat_2021 = iat_2021 %>%
select(IAT_score = D_biep.Thin_Good_all,
att7, iam_001, identfat_001,
myweight_002, myheight_002,
identthin_001, controlother_001,
controlyou_001, mostpref_001,
important_001,
birthmonth, birthyear, month, year,
raceomb_002, raceombmulti, ethnicityomb,
edu, edu_14,
genderIdentity,
birthSex) %>%
drop_na()
load(file = here("../Project/data/iat_data.rda"))
iat_2021 = iat_2021 %>%
select(IAT_score = D_biep.Thin_Good_all,
att7, iam_001, identfat_001,
myweight_002, myheight_002,
identthin_001, controlother_001,
controlyou_001, mostpref_001,
important_001,
birthmonth, birthyear, month, year,
raceomb_002, raceombmulti, ethnicityomb,
edu, edu_14,
genderIdentity,
birthSex) %>%
drop_na()
ggplot(IAT_score, aes(x = iam_001_f, y = IAT_score))+
geom_boxplot()+
labs(x = "Self-perception of weight",
y = "IAT Score",
title = "IAT Score by self-perception of weight") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(iat_2021, aes(x = iam_001_f, y = IAT_score))+
geom_boxplot()+
labs(x = "Self-perception of weight",
y = "IAT Score",
title = "IAT Score by self-perception of weight") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
iat_2021 = iat_2021 %>% mutate(iam_001_f = case_match(iam_001,
7 ~ "Very overweight",
6 ~ "Moderately overweight",
5 ~ "Slightly overweight",
4 ~ "Neither underweight nor underweight",
3 ~ "Slightly underweight",
2 ~ "Moderately underweight",
1 ~ "Very underweight",
.default = NA) %>%
factor(levels = c("Very underweight", # Assigns the level order!
"Moderately underweight",
"Slightly underweight",
"Neither underweight nor underweight",
"Slightly overweight",
"Moderately overweight",
"Very overweight")))
ggplot(iat_2021, aes(x = iam_001_f, y = IAT_score))+
geom_boxplot()+
labs(x = "Self-perception of weight",
y = "IAT Score",
title = "IAT Score by self-perception of weight") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
#| code-fold: true
#| code-summary: How I made the plot
ggplot(iat_2021, aes(x = IAT_score, y = iam_001_f))+
geom_boxplot()+
labs(y = "Self-perception of weight",
x = "IAT Score",
title = "IAT Score by self-perception of weight") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
#| code-fold: true
#| code-summary: How I made the plot
ggplot(iat_2021, aes(x = IAT_score, y = iam_001_f))+
geom_density()+
labs(y = "Self-perception of weight",
x = "IAT Score",
title = "IAT Score by self-perception of weight") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
labs(x = "IAT Score",
title = "IAT Score by self-perception of weight") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
#| code-fold: true
#| code-summary: How I made the plot
ggplot(iat_2021, aes(x = IAT_score, color = iam_001_f))+
geom_density() +
labs(x = "IAT Score",
title = "IAT Score by self-perception of weight") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
